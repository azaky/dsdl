/*
 * generated by Xtext
 */
package com.dsdl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import com.dsdl.services.DSDLGrammarAccess;

public class DSDLParser extends AbstractContentAssistParser {
	
	@Inject
	private DSDLGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected com.dsdl.ui.contentassist.antlr.internal.InternalDSDLParser createParser() {
		com.dsdl.ui.contentassist.antlr.internal.InternalDSDLParser result = new com.dsdl.ui.contentassist.antlr.internal.InternalDSDLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getPropertyAccess().getAlternatives(), "rule__Property__Alternatives");
					put(grammarAccess.getDatabaseAccess().getGroup(), "rule__Database__Group__0");
					put(grammarAccess.getTableAccess().getGroup(), "rule__Table__Group__0");
					put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
					put(grammarAccess.getIntegerAccess().getGroup(), "rule__Integer__Group__0");
					put(grammarAccess.getIntegerAccess().getGroup_1(), "rule__Integer__Group_1__0");
					put(grammarAccess.getVarcharAccess().getGroup(), "rule__Varchar__Group__0");
					put(grammarAccess.getVarcharAccess().getGroup_1(), "rule__Varchar__Group_1__0");
					put(grammarAccess.getForeignKeyAccess().getGroup(), "rule__ForeignKey__Group__0");
					put(grammarAccess.getDatabaseAccess().getNameAssignment_1(), "rule__Database__NameAssignment_1");
					put(grammarAccess.getDatabaseAccess().getTableAssignment_3(), "rule__Database__TableAssignment_3");
					put(grammarAccess.getTableAccess().getNameAssignment_1(), "rule__Table__NameAssignment_1");
					put(grammarAccess.getTableAccess().getAttributeAssignment_3(), "rule__Table__AttributeAssignment_3");
					put(grammarAccess.getAttributeAccess().getAttributeNameAssignment_0(), "rule__Attribute__AttributeNameAssignment_0");
					put(grammarAccess.getAttributeAccess().getTypeAssignment_2(), "rule__Attribute__TypeAssignment_2");
					put(grammarAccess.getAttributeAccess().getPropertyAssignment_3(), "rule__Attribute__PropertyAssignment_3");
					put(grammarAccess.getIntegerAccess().getIntegerAssignment_0(), "rule__Integer__IntegerAssignment_0");
					put(grammarAccess.getIntegerAccess().getLengthAssignment_1_1(), "rule__Integer__LengthAssignment_1_1");
					put(grammarAccess.getVarcharAccess().getVarcharAssignment_0(), "rule__Varchar__VarcharAssignment_0");
					put(grammarAccess.getVarcharAccess().getLengthAssignment_1_1(), "rule__Varchar__LengthAssignment_1_1");
					put(grammarAccess.getTextAccess().getTextAssignment(), "rule__Text__TextAssignment");
					put(grammarAccess.getDateTimeAccess().getDateAssignment(), "rule__DateTime__DateAssignment");
					put(grammarAccess.getPrimaryKeyAccess().getPrimaryKeyAssignment(), "rule__PrimaryKey__PrimaryKeyAssignment");
					put(grammarAccess.getAutoIncrementAccess().getAutoIncrementAssignment(), "rule__AutoIncrement__AutoIncrementAssignment");
					put(grammarAccess.getNullableAccess().getNullableAssignment(), "rule__Nullable__NullableAssignment");
					put(grammarAccess.getForeignKeyAccess().getTableNameAssignment_1(), "rule__ForeignKey__TableNameAssignment_1");
					put(grammarAccess.getForeignKeyAccess().getAttributeNameAssignment_3(), "rule__ForeignKey__AttributeNameAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			com.dsdl.ui.contentassist.antlr.internal.InternalDSDLParser typedParser = (com.dsdl.ui.contentassist.antlr.internal.InternalDSDLParser) parser;
			typedParser.entryRuleDatabase();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public DSDLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(DSDLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
