/*
 * generated by Xtext
 */
grammar InternalDSDL;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package com.dsdl.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.dsdl.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import com.dsdl.services.DSDLGrammarAccess;

}

@parser::members {
 
 	private DSDLGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(DSDLGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleDatabase
entryRuleDatabase 
:
{ before(grammarAccess.getDatabaseRule()); }
	 ruleDatabase
{ after(grammarAccess.getDatabaseRule()); } 
	 EOF 
;

// Rule Database
ruleDatabase
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDatabaseAccess().getGroup()); }
(rule__Database__Group__0)
{ after(grammarAccess.getDatabaseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTable
entryRuleTable 
:
{ before(grammarAccess.getTableRule()); }
	 ruleTable
{ after(grammarAccess.getTableRule()); } 
	 EOF 
;

// Rule Table
ruleTable
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTableAccess().getGroup()); }
(rule__Table__Group__0)
{ after(grammarAccess.getTableAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAttribute
entryRuleAttribute 
:
{ before(grammarAccess.getAttributeRule()); }
	 ruleAttribute
{ after(grammarAccess.getAttributeRule()); } 
	 EOF 
;

// Rule Attribute
ruleAttribute
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAttributeAccess().getGroup()); }
(rule__Attribute__Group__0)
{ after(grammarAccess.getAttributeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleType
entryRuleType 
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeAccess().getAlternatives()); }
(rule__Type__Alternatives)
{ after(grammarAccess.getTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProperty
entryRuleProperty 
:
{ before(grammarAccess.getPropertyRule()); }
	 ruleProperty
{ after(grammarAccess.getPropertyRule()); } 
	 EOF 
;

// Rule Property
ruleProperty
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPropertyAccess().getAlternatives()); }
(rule__Property__Alternatives)
{ after(grammarAccess.getPropertyAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInteger
entryRuleInteger 
:
{ before(grammarAccess.getIntegerRule()); }
	 ruleInteger
{ after(grammarAccess.getIntegerRule()); } 
	 EOF 
;

// Rule Integer
ruleInteger
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntegerAccess().getGroup()); }
(rule__Integer__Group__0)
{ after(grammarAccess.getIntegerAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVarchar
entryRuleVarchar 
:
{ before(grammarAccess.getVarcharRule()); }
	 ruleVarchar
{ after(grammarAccess.getVarcharRule()); } 
	 EOF 
;

// Rule Varchar
ruleVarchar
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVarcharAccess().getGroup()); }
(rule__Varchar__Group__0)
{ after(grammarAccess.getVarcharAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleText
entryRuleText 
:
{ before(grammarAccess.getTextRule()); }
	 ruleText
{ after(grammarAccess.getTextRule()); } 
	 EOF 
;

// Rule Text
ruleText
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTextAccess().getTextAssignment()); }
(rule__Text__TextAssignment)
{ after(grammarAccess.getTextAccess().getTextAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDateTime
entryRuleDateTime 
:
{ before(grammarAccess.getDateTimeRule()); }
	 ruleDateTime
{ after(grammarAccess.getDateTimeRule()); } 
	 EOF 
;

// Rule DateTime
ruleDateTime
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDateTimeAccess().getDateAssignment()); }
(rule__DateTime__DateAssignment)
{ after(grammarAccess.getDateTimeAccess().getDateAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimaryKey
entryRulePrimaryKey 
:
{ before(grammarAccess.getPrimaryKeyRule()); }
	 rulePrimaryKey
{ after(grammarAccess.getPrimaryKeyRule()); } 
	 EOF 
;

// Rule PrimaryKey
rulePrimaryKey
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimaryKeyAccess().getPrimaryKeyAssignment()); }
(rule__PrimaryKey__PrimaryKeyAssignment)
{ after(grammarAccess.getPrimaryKeyAccess().getPrimaryKeyAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAutoIncrement
entryRuleAutoIncrement 
:
{ before(grammarAccess.getAutoIncrementRule()); }
	 ruleAutoIncrement
{ after(grammarAccess.getAutoIncrementRule()); } 
	 EOF 
;

// Rule AutoIncrement
ruleAutoIncrement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAutoIncrementAccess().getAutoIncrementAssignment()); }
(rule__AutoIncrement__AutoIncrementAssignment)
{ after(grammarAccess.getAutoIncrementAccess().getAutoIncrementAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNullable
entryRuleNullable 
:
{ before(grammarAccess.getNullableRule()); }
	 ruleNullable
{ after(grammarAccess.getNullableRule()); } 
	 EOF 
;

// Rule Nullable
ruleNullable
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNullableAccess().getNullableAssignment()); }
(rule__Nullable__NullableAssignment)
{ after(grammarAccess.getNullableAccess().getNullableAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleForeignKey
entryRuleForeignKey 
:
{ before(grammarAccess.getForeignKeyRule()); }
	 ruleForeignKey
{ after(grammarAccess.getForeignKeyRule()); } 
	 EOF 
;

// Rule ForeignKey
ruleForeignKey
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getForeignKeyAccess().getGroup()); }
(rule__ForeignKey__Group__0)
{ after(grammarAccess.getForeignKeyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Type__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getIntegerParserRuleCall_0()); }
	ruleInteger
{ after(grammarAccess.getTypeAccess().getIntegerParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getVarcharParserRuleCall_1()); }
	ruleVarchar
{ after(grammarAccess.getTypeAccess().getVarcharParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getTextParserRuleCall_2()); }
	ruleText
{ after(grammarAccess.getTypeAccess().getTextParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getDateTimeParserRuleCall_3()); }
	ruleDateTime
{ after(grammarAccess.getTypeAccess().getDateTimeParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAccess().getPrimaryKeyParserRuleCall_0()); }
	rulePrimaryKey
{ after(grammarAccess.getPropertyAccess().getPrimaryKeyParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPropertyAccess().getAutoIncrementParserRuleCall_1()); }
	ruleAutoIncrement
{ after(grammarAccess.getPropertyAccess().getAutoIncrementParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getPropertyAccess().getNullableParserRuleCall_2()); }
	ruleNullable
{ after(grammarAccess.getPropertyAccess().getNullableParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getPropertyAccess().getForeignKeyParserRuleCall_3()); }
	ruleForeignKey
{ after(grammarAccess.getPropertyAccess().getForeignKeyParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Database__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Database__Group__0__Impl
	rule__Database__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Database__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDatabaseAccess().getDatabaseKeyword_0()); }

	'database' 

{ after(grammarAccess.getDatabaseAccess().getDatabaseKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Database__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Database__Group__1__Impl
	rule__Database__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Database__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDatabaseAccess().getNameAssignment_1()); }
(rule__Database__NameAssignment_1)
{ after(grammarAccess.getDatabaseAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Database__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Database__Group__2__Impl
	rule__Database__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Database__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDatabaseAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getDatabaseAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Database__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Database__Group__3__Impl
	rule__Database__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Database__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDatabaseAccess().getTableAssignment_3()); }
(rule__Database__TableAssignment_3)*
{ after(grammarAccess.getDatabaseAccess().getTableAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Database__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Database__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Database__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDatabaseAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getDatabaseAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Table__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Table__Group__0__Impl
	rule__Table__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableAccess().getTableKeyword_0()); }

	'table' 

{ after(grammarAccess.getTableAccess().getTableKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Table__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Table__Group__1__Impl
	rule__Table__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableAccess().getNameAssignment_1()); }
(rule__Table__NameAssignment_1)
{ after(grammarAccess.getTableAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Table__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Table__Group__2__Impl
	rule__Table__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getTableAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Table__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Table__Group__3__Impl
	rule__Table__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableAccess().getAttributeAssignment_3()); }
(rule__Table__AttributeAssignment_3)*
{ after(grammarAccess.getTableAccess().getAttributeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Table__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Table__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getTableAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Attribute__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__Group__0__Impl
	rule__Attribute__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getAttributeNameAssignment_0()); }
(rule__Attribute__AttributeNameAssignment_0)
{ after(grammarAccess.getAttributeAccess().getAttributeNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__Group__1__Impl
	rule__Attribute__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getAttributeAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__Group__2__Impl
	rule__Attribute__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getTypeAssignment_2()); }
(rule__Attribute__TypeAssignment_2)
{ after(grammarAccess.getAttributeAccess().getTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getPropertyAssignment_3()); }
(rule__Attribute__PropertyAssignment_3)*
{ after(grammarAccess.getAttributeAccess().getPropertyAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Integer__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Integer__Group__0__Impl
	rule__Integer__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Integer__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerAccess().getIntegerAssignment_0()); }
(rule__Integer__IntegerAssignment_0)
{ after(grammarAccess.getIntegerAccess().getIntegerAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Integer__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Integer__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Integer__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerAccess().getGroup_1()); }
(rule__Integer__Group_1__0)?
{ after(grammarAccess.getIntegerAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Integer__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Integer__Group_1__0__Impl
	rule__Integer__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Integer__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getIntegerAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Integer__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Integer__Group_1__1__Impl
	rule__Integer__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Integer__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerAccess().getLengthAssignment_1_1()); }
(rule__Integer__LengthAssignment_1_1)
{ after(grammarAccess.getIntegerAccess().getLengthAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Integer__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Integer__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Integer__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getIntegerAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Varchar__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Varchar__Group__0__Impl
	rule__Varchar__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Varchar__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarcharAccess().getVarcharAssignment_0()); }
(rule__Varchar__VarcharAssignment_0)
{ after(grammarAccess.getVarcharAccess().getVarcharAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Varchar__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Varchar__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Varchar__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarcharAccess().getGroup_1()); }
(rule__Varchar__Group_1__0)?
{ after(grammarAccess.getVarcharAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Varchar__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Varchar__Group_1__0__Impl
	rule__Varchar__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Varchar__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarcharAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getVarcharAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Varchar__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Varchar__Group_1__1__Impl
	rule__Varchar__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Varchar__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarcharAccess().getLengthAssignment_1_1()); }
(rule__Varchar__LengthAssignment_1_1)
{ after(grammarAccess.getVarcharAccess().getLengthAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Varchar__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Varchar__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Varchar__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarcharAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getVarcharAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ForeignKey__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForeignKey__Group__0__Impl
	rule__ForeignKey__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeignKeyAccess().getRefer_toKeyword_0()); }

	'refer_to' 

{ after(grammarAccess.getForeignKeyAccess().getRefer_toKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForeignKey__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForeignKey__Group__1__Impl
	rule__ForeignKey__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeignKeyAccess().getTableNameAssignment_1()); }
(rule__ForeignKey__TableNameAssignment_1)
{ after(grammarAccess.getForeignKeyAccess().getTableNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForeignKey__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForeignKey__Group__2__Impl
	rule__ForeignKey__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeignKeyAccess().getFullStopKeyword_2()); }

	'.' 

{ after(grammarAccess.getForeignKeyAccess().getFullStopKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForeignKey__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForeignKey__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeignKeyAccess().getAttributeNameAssignment_3()); }
(rule__ForeignKey__AttributeNameAssignment_3)
{ after(grammarAccess.getForeignKeyAccess().getAttributeNameAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}











rule__Database__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDatabaseAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getDatabaseAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Database__TableAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDatabaseAccess().getTableTableParserRuleCall_3_0()); }
	ruleTable{ after(grammarAccess.getDatabaseAccess().getTableTableParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Table__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getTableAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Table__AttributeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableAccess().getAttributeAttributeParserRuleCall_3_0()); }
	ruleAttribute{ after(grammarAccess.getTableAccess().getAttributeAttributeParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__AttributeNameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getAttributeNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getAttributeAccess().getAttributeNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getTypeTypeParserRuleCall_2_0()); }
	ruleType{ after(grammarAccess.getAttributeAccess().getTypeTypeParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__PropertyAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getPropertyPropertyParserRuleCall_3_0()); }
	ruleProperty{ after(grammarAccess.getAttributeAccess().getPropertyPropertyParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Integer__IntegerAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerAccess().getIntegerIntegerKeyword_0_0()); }
(
{ before(grammarAccess.getIntegerAccess().getIntegerIntegerKeyword_0_0()); }

	'integer' 

{ after(grammarAccess.getIntegerAccess().getIntegerIntegerKeyword_0_0()); }
)

{ after(grammarAccess.getIntegerAccess().getIntegerIntegerKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Integer__LengthAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerAccess().getLengthINTTerminalRuleCall_1_1_0()); }
	RULE_INT{ after(grammarAccess.getIntegerAccess().getLengthINTTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Varchar__VarcharAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarcharAccess().getVarcharVarcharKeyword_0_0()); }
(
{ before(grammarAccess.getVarcharAccess().getVarcharVarcharKeyword_0_0()); }

	'varchar' 

{ after(grammarAccess.getVarcharAccess().getVarcharVarcharKeyword_0_0()); }
)

{ after(grammarAccess.getVarcharAccess().getVarcharVarcharKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Varchar__LengthAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarcharAccess().getLengthINTTerminalRuleCall_1_1_0()); }
	RULE_INT{ after(grammarAccess.getVarcharAccess().getLengthINTTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Text__TextAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextAccess().getTextTextKeyword_0()); }
(
{ before(grammarAccess.getTextAccess().getTextTextKeyword_0()); }

	'text' 

{ after(grammarAccess.getTextAccess().getTextTextKeyword_0()); }
)

{ after(grammarAccess.getTextAccess().getTextTextKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DateTime__DateAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateTimeAccess().getDateDatetimeKeyword_0()); }
(
{ before(grammarAccess.getDateTimeAccess().getDateDatetimeKeyword_0()); }

	'datetime' 

{ after(grammarAccess.getDateTimeAccess().getDateDatetimeKeyword_0()); }
)

{ after(grammarAccess.getDateTimeAccess().getDateDatetimeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__PrimaryKeyAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryKeyAccess().getPrimaryKeyPrimary_keyKeyword_0()); }
(
{ before(grammarAccess.getPrimaryKeyAccess().getPrimaryKeyPrimary_keyKeyword_0()); }

	'primary_key' 

{ after(grammarAccess.getPrimaryKeyAccess().getPrimaryKeyPrimary_keyKeyword_0()); }
)

{ after(grammarAccess.getPrimaryKeyAccess().getPrimaryKeyPrimary_keyKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AutoIncrement__AutoIncrementAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAutoIncrementAccess().getAutoIncrementAuto_incrementKeyword_0()); }
(
{ before(grammarAccess.getAutoIncrementAccess().getAutoIncrementAuto_incrementKeyword_0()); }

	'auto_increment' 

{ after(grammarAccess.getAutoIncrementAccess().getAutoIncrementAuto_incrementKeyword_0()); }
)

{ after(grammarAccess.getAutoIncrementAccess().getAutoIncrementAuto_incrementKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Nullable__NullableAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullableAccess().getNullableNullableKeyword_0()); }
(
{ before(grammarAccess.getNullableAccess().getNullableNullableKeyword_0()); }

	'nullable' 

{ after(grammarAccess.getNullableAccess().getNullableNullableKeyword_0()); }
)

{ after(grammarAccess.getNullableAccess().getNullableNullableKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__TableNameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeignKeyAccess().getTableNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getForeignKeyAccess().getTableNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__AttributeNameAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeignKeyAccess().getAttributeNameIDTerminalRuleCall_3_0()); }
	RULE_ID{ after(grammarAccess.getForeignKeyAccess().getAttributeNameIDTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


