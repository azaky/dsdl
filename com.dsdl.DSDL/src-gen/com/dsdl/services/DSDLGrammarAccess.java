/*
 * generated by Xtext
 */
package com.dsdl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class DSDLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DatabaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Database");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDatabaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTableTableParserRuleCall_3_0 = (RuleCall)cTableAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Database:
		//	"database" name=ID "{" table+=Table* "}";
		@Override public ParserRule getRule() { return rule; }

		//"database" name=ID "{" table+=Table* "}"
		public Group getGroup() { return cGroup; }

		//"database"
		public Keyword getDatabaseKeyword_0() { return cDatabaseKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//table+=Table*
		public Assignment getTableAssignment_3() { return cTableAssignment_3; }

		//Table
		public RuleCall getTableTableParserRuleCall_3_0() { return cTableTableParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class TableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Table");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributeAttributeParserRuleCall_3_0 = (RuleCall)cAttributeAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Table:
		//	"table" name=ID "{" attribute+=Attribute* "}";
		@Override public ParserRule getRule() { return rule; }

		//"table" name=ID "{" attribute+=Attribute* "}"
		public Group getGroup() { return cGroup; }

		//"table"
		public Keyword getTableKeyword_0() { return cTableKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//attribute+=Attribute*
		public Assignment getAttributeAssignment_3() { return cAttributeAssignment_3; }

		//Attribute
		public RuleCall getAttributeAttributeParserRuleCall_3_0() { return cAttributeAttributeParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttributeNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAttributeNameIDTerminalRuleCall_0_0 = (RuleCall)cAttributeNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cPropertyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertyPropertyParserRuleCall_3_0 = (RuleCall)cPropertyAssignment_3.eContents().get(0);
		
		//Attribute:
		//	attributeName=ID ":" type=Type property+=Property*;
		@Override public ParserRule getRule() { return rule; }

		//attributeName=ID ":" type=Type property+=Property*
		public Group getGroup() { return cGroup; }

		//attributeName=ID
		public Assignment getAttributeNameAssignment_0() { return cAttributeNameAssignment_0; }

		//ID
		public RuleCall getAttributeNameIDTerminalRuleCall_0_0() { return cAttributeNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }

		//property+=Property*
		public Assignment getPropertyAssignment_3() { return cPropertyAssignment_3; }

		//Property
		public RuleCall getPropertyPropertyParserRuleCall_3_0() { return cPropertyPropertyParserRuleCall_3_0; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVarcharParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTextParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDateTimeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Type:
		//	Integer | Varchar | Text | DateTime;
		@Override public ParserRule getRule() { return rule; }

		//Integer | Varchar | Text | DateTime
		public Alternatives getAlternatives() { return cAlternatives; }

		//Integer
		public RuleCall getIntegerParserRuleCall_0() { return cIntegerParserRuleCall_0; }

		//Varchar
		public RuleCall getVarcharParserRuleCall_1() { return cVarcharParserRuleCall_1; }

		//Text
		public RuleCall getTextParserRuleCall_2() { return cTextParserRuleCall_2; }

		//DateTime
		public RuleCall getDateTimeParserRuleCall_3() { return cDateTimeParserRuleCall_3; }
	}

	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Property");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimaryKeyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAutoIncrementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNullableParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cForeignKeyParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Property:
		//	PrimaryKey | AutoIncrement | Nullable | ForeignKey;
		@Override public ParserRule getRule() { return rule; }

		//PrimaryKey | AutoIncrement | Nullable | ForeignKey
		public Alternatives getAlternatives() { return cAlternatives; }

		//PrimaryKey
		public RuleCall getPrimaryKeyParserRuleCall_0() { return cPrimaryKeyParserRuleCall_0; }

		//AutoIncrement
		public RuleCall getAutoIncrementParserRuleCall_1() { return cAutoIncrementParserRuleCall_1; }

		//Nullable
		public RuleCall getNullableParserRuleCall_2() { return cNullableParserRuleCall_2; }

		//ForeignKey
		public RuleCall getForeignKeyParserRuleCall_3() { return cForeignKeyParserRuleCall_3; }
	}

	public class IntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Integer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIntegerAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIntegerIntegerKeyword_0_0 = (Keyword)cIntegerAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLengthAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLengthINTTerminalRuleCall_1_1_0 = (RuleCall)cLengthAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Integer:
		//	integer="integer" ("(" length=INT ")")?;
		@Override public ParserRule getRule() { return rule; }

		//integer="integer" ("(" length=INT ")")?
		public Group getGroup() { return cGroup; }

		//integer="integer"
		public Assignment getIntegerAssignment_0() { return cIntegerAssignment_0; }

		//"integer"
		public Keyword getIntegerIntegerKeyword_0_0() { return cIntegerIntegerKeyword_0_0; }

		//("(" length=INT ")")?
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//length=INT
		public Assignment getLengthAssignment_1_1() { return cLengthAssignment_1_1; }

		//INT
		public RuleCall getLengthINTTerminalRuleCall_1_1_0() { return cLengthINTTerminalRuleCall_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class VarcharElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Varchar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarcharAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cVarcharVarcharKeyword_0_0 = (Keyword)cVarcharAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLengthAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLengthINTTerminalRuleCall_1_1_0 = (RuleCall)cLengthAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Varchar:
		//	varchar="varchar" ("(" length=INT ")")?;
		@Override public ParserRule getRule() { return rule; }

		//varchar="varchar" ("(" length=INT ")")?
		public Group getGroup() { return cGroup; }

		//varchar="varchar"
		public Assignment getVarcharAssignment_0() { return cVarcharAssignment_0; }

		//"varchar"
		public Keyword getVarcharVarcharKeyword_0_0() { return cVarcharVarcharKeyword_0_0; }

		//("(" length=INT ")")?
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//length=INT
		public Assignment getLengthAssignment_1_1() { return cLengthAssignment_1_1; }

		//INT
		public RuleCall getLengthINTTerminalRuleCall_1_1_0() { return cLengthINTTerminalRuleCall_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class TextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Text");
		private final Assignment cTextAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cTextTextKeyword_0 = (Keyword)cTextAssignment.eContents().get(0);
		
		//Text:
		//	text="text";
		@Override public ParserRule getRule() { return rule; }

		//text="text"
		public Assignment getTextAssignment() { return cTextAssignment; }

		//"text"
		public Keyword getTextTextKeyword_0() { return cTextTextKeyword_0; }
	}

	public class DateTimeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DateTime");
		private final Assignment cDateAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cDateDatetimeKeyword_0 = (Keyword)cDateAssignment.eContents().get(0);
		
		//DateTime:
		//	date="datetime";
		@Override public ParserRule getRule() { return rule; }

		//date="datetime"
		public Assignment getDateAssignment() { return cDateAssignment; }

		//"datetime"
		public Keyword getDateDatetimeKeyword_0() { return cDateDatetimeKeyword_0; }
	}

	public class PrimaryKeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryKey");
		private final Assignment cPrimaryKeyAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cPrimaryKeyPrimary_keyKeyword_0 = (Keyword)cPrimaryKeyAssignment.eContents().get(0);
		
		//PrimaryKey:
		//	primaryKey?="primary_key";
		@Override public ParserRule getRule() { return rule; }

		//primaryKey?="primary_key"
		public Assignment getPrimaryKeyAssignment() { return cPrimaryKeyAssignment; }

		//"primary_key"
		public Keyword getPrimaryKeyPrimary_keyKeyword_0() { return cPrimaryKeyPrimary_keyKeyword_0; }
	}

	public class AutoIncrementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AutoIncrement");
		private final Assignment cAutoIncrementAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cAutoIncrementAuto_incrementKeyword_0 = (Keyword)cAutoIncrementAssignment.eContents().get(0);
		
		//AutoIncrement:
		//	autoIncrement?="auto_increment";
		@Override public ParserRule getRule() { return rule; }

		//autoIncrement?="auto_increment"
		public Assignment getAutoIncrementAssignment() { return cAutoIncrementAssignment; }

		//"auto_increment"
		public Keyword getAutoIncrementAuto_incrementKeyword_0() { return cAutoIncrementAuto_incrementKeyword_0; }
	}

	public class NullableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Nullable");
		private final Assignment cNullableAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNullableNullableKeyword_0 = (Keyword)cNullableAssignment.eContents().get(0);
		
		//Nullable:
		//	nullable?="nullable";
		@Override public ParserRule getRule() { return rule; }

		//nullable?="nullable"
		public Assignment getNullableAssignment() { return cNullableAssignment; }

		//"nullable"
		public Keyword getNullableNullableKeyword_0() { return cNullableNullableKeyword_0; }
	}

	public class ForeignKeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForeignKey");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRefer_toKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTableNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTableNameIDTerminalRuleCall_1_0 = (RuleCall)cTableNameAssignment_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributeNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributeNameIDTerminalRuleCall_3_0 = (RuleCall)cAttributeNameAssignment_3.eContents().get(0);
		
		//ForeignKey:
		//	"refer_to" tableName=ID "." attributeName=ID;
		@Override public ParserRule getRule() { return rule; }

		//"refer_to" tableName=ID "." attributeName=ID
		public Group getGroup() { return cGroup; }

		//"refer_to"
		public Keyword getRefer_toKeyword_0() { return cRefer_toKeyword_0; }

		//tableName=ID
		public Assignment getTableNameAssignment_1() { return cTableNameAssignment_1; }

		//ID
		public RuleCall getTableNameIDTerminalRuleCall_1_0() { return cTableNameIDTerminalRuleCall_1_0; }

		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }

		//attributeName=ID
		public Assignment getAttributeNameAssignment_3() { return cAttributeNameAssignment_3; }

		//ID
		public RuleCall getAttributeNameIDTerminalRuleCall_3_0() { return cAttributeNameIDTerminalRuleCall_3_0; }
	}
	
	
	private final DatabaseElements pDatabase;
	private final TableElements pTable;
	private final AttributeElements pAttribute;
	private final TypeElements pType;
	private final PropertyElements pProperty;
	private final IntegerElements pInteger;
	private final VarcharElements pVarchar;
	private final TextElements pText;
	private final DateTimeElements pDateTime;
	private final PrimaryKeyElements pPrimaryKey;
	private final AutoIncrementElements pAutoIncrement;
	private final NullableElements pNullable;
	private final ForeignKeyElements pForeignKey;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DSDLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDatabase = new DatabaseElements();
		this.pTable = new TableElements();
		this.pAttribute = new AttributeElements();
		this.pType = new TypeElements();
		this.pProperty = new PropertyElements();
		this.pInteger = new IntegerElements();
		this.pVarchar = new VarcharElements();
		this.pText = new TextElements();
		this.pDateTime = new DateTimeElements();
		this.pPrimaryKey = new PrimaryKeyElements();
		this.pAutoIncrement = new AutoIncrementElements();
		this.pNullable = new NullableElements();
		this.pForeignKey = new ForeignKeyElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.dsdl.DSDL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Database:
	//	"database" name=ID "{" table+=Table* "}";
	public DatabaseElements getDatabaseAccess() {
		return pDatabase;
	}
	
	public ParserRule getDatabaseRule() {
		return getDatabaseAccess().getRule();
	}

	//Table:
	//	"table" name=ID "{" attribute+=Attribute* "}";
	public TableElements getTableAccess() {
		return pTable;
	}
	
	public ParserRule getTableRule() {
		return getTableAccess().getRule();
	}

	//Attribute:
	//	attributeName=ID ":" type=Type property+=Property*;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//Type:
	//	Integer | Varchar | Text | DateTime;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//Property:
	//	PrimaryKey | AutoIncrement | Nullable | ForeignKey;
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}

	//Integer:
	//	integer="integer" ("(" length=INT ")")?;
	public IntegerElements getIntegerAccess() {
		return pInteger;
	}
	
	public ParserRule getIntegerRule() {
		return getIntegerAccess().getRule();
	}

	//Varchar:
	//	varchar="varchar" ("(" length=INT ")")?;
	public VarcharElements getVarcharAccess() {
		return pVarchar;
	}
	
	public ParserRule getVarcharRule() {
		return getVarcharAccess().getRule();
	}

	//Text:
	//	text="text";
	public TextElements getTextAccess() {
		return pText;
	}
	
	public ParserRule getTextRule() {
		return getTextAccess().getRule();
	}

	//DateTime:
	//	date="datetime";
	public DateTimeElements getDateTimeAccess() {
		return pDateTime;
	}
	
	public ParserRule getDateTimeRule() {
		return getDateTimeAccess().getRule();
	}

	//PrimaryKey:
	//	primaryKey?="primary_key";
	public PrimaryKeyElements getPrimaryKeyAccess() {
		return pPrimaryKey;
	}
	
	public ParserRule getPrimaryKeyRule() {
		return getPrimaryKeyAccess().getRule();
	}

	//AutoIncrement:
	//	autoIncrement?="auto_increment";
	public AutoIncrementElements getAutoIncrementAccess() {
		return pAutoIncrement;
	}
	
	public ParserRule getAutoIncrementRule() {
		return getAutoIncrementAccess().getRule();
	}

	//Nullable:
	//	nullable?="nullable";
	public NullableElements getNullableAccess() {
		return pNullable;
	}
	
	public ParserRule getNullableRule() {
		return getNullableAccess().getRule();
	}

	//ForeignKey:
	//	"refer_to" tableName=ID "." attributeName=ID;
	public ForeignKeyElements getForeignKeyAccess() {
		return pForeignKey;
	}
	
	public ParserRule getForeignKeyRule() {
		return getForeignKeyAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
