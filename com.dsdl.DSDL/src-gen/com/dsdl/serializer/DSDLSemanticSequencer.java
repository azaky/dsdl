/*
 * generated by Xtext
 */
package com.dsdl.serializer;

import com.dsdl.dSDL.Attribute;
import com.dsdl.dSDL.AutoIncrement;
import com.dsdl.dSDL.DSDLPackage;
import com.dsdl.dSDL.Database;
import com.dsdl.dSDL.DateTime;
import com.dsdl.dSDL.ForeignKey;
import com.dsdl.dSDL.Nullable;
import com.dsdl.dSDL.PrimaryKey;
import com.dsdl.dSDL.Table;
import com.dsdl.dSDL.Text;
import com.dsdl.dSDL.Varchar;
import com.dsdl.services.DSDLGrammarAccess;
import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class DSDLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DSDLGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == DSDLPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case DSDLPackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case DSDLPackage.AUTO_INCREMENT:
				sequence_AutoIncrement(context, (AutoIncrement) semanticObject); 
				return; 
			case DSDLPackage.DATABASE:
				sequence_Database(context, (Database) semanticObject); 
				return; 
			case DSDLPackage.DATE_TIME:
				sequence_DateTime(context, (DateTime) semanticObject); 
				return; 
			case DSDLPackage.FOREIGN_KEY:
				sequence_ForeignKey(context, (ForeignKey) semanticObject); 
				return; 
			case DSDLPackage.INTEGER:
				sequence_Integer(context, (com.dsdl.dSDL.Integer) semanticObject); 
				return; 
			case DSDLPackage.NULLABLE:
				sequence_Nullable(context, (Nullable) semanticObject); 
				return; 
			case DSDLPackage.PRIMARY_KEY:
				sequence_PrimaryKey(context, (PrimaryKey) semanticObject); 
				return; 
			case DSDLPackage.TABLE:
				sequence_Table(context, (Table) semanticObject); 
				return; 
			case DSDLPackage.TEXT:
				sequence_Text(context, (Text) semanticObject); 
				return; 
			case DSDLPackage.VARCHAR:
				sequence_Varchar(context, (Varchar) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (attributeName=ID type=Type property+=Property*)
	 */
	protected void sequence_Attribute(EObject context, Attribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     autoIncrement?='auto_increment'
	 */
	protected void sequence_AutoIncrement(EObject context, AutoIncrement semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, DSDLPackage.Literals.AUTO_INCREMENT__AUTO_INCREMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DSDLPackage.Literals.AUTO_INCREMENT__AUTO_INCREMENT));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getAutoIncrementAccess().getAutoIncrementAuto_incrementKeyword_0(), semanticObject.isAutoIncrement());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID table+=Table*)
	 */
	protected void sequence_Database(EObject context, Database semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     date='datetime'
	 */
	protected void sequence_DateTime(EObject context, DateTime semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, DSDLPackage.Literals.DATE_TIME__DATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DSDLPackage.Literals.DATE_TIME__DATE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getDateTimeAccess().getDateDatetimeKeyword_0(), semanticObject.getDate());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (tableName=ID attributeName=ID)
	 */
	protected void sequence_ForeignKey(EObject context, ForeignKey semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, DSDLPackage.Literals.FOREIGN_KEY__TABLE_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DSDLPackage.Literals.FOREIGN_KEY__TABLE_NAME));
			if(transientValues.isValueTransient(semanticObject, DSDLPackage.Literals.FOREIGN_KEY__ATTRIBUTE_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DSDLPackage.Literals.FOREIGN_KEY__ATTRIBUTE_NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getForeignKeyAccess().getTableNameIDTerminalRuleCall_1_0(), semanticObject.getTableName());
		feeder.accept(grammarAccess.getForeignKeyAccess().getAttributeNameIDTerminalRuleCall_3_0(), semanticObject.getAttributeName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (integer='integer' length=INT?)
	 */
	protected void sequence_Integer(EObject context, com.dsdl.dSDL.Integer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     nullable?='nullable'
	 */
	protected void sequence_Nullable(EObject context, Nullable semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, DSDLPackage.Literals.NULLABLE__NULLABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DSDLPackage.Literals.NULLABLE__NULLABLE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getNullableAccess().getNullableNullableKeyword_0(), semanticObject.isNullable());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     primaryKey?='primary_key'
	 */
	protected void sequence_PrimaryKey(EObject context, PrimaryKey semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, DSDLPackage.Literals.PRIMARY_KEY__PRIMARY_KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DSDLPackage.Literals.PRIMARY_KEY__PRIMARY_KEY));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getPrimaryKeyAccess().getPrimaryKeyPrimary_keyKeyword_0(), semanticObject.isPrimaryKey());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID attribute+=Attribute*)
	 */
	protected void sequence_Table(EObject context, Table semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     text='text'
	 */
	protected void sequence_Text(EObject context, Text semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, DSDLPackage.Literals.TEXT__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DSDLPackage.Literals.TEXT__TEXT));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getTextAccess().getTextTextKeyword_0(), semanticObject.getText());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (varchar='varchar' length=INT?)
	 */
	protected void sequence_Varchar(EObject context, Varchar semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
